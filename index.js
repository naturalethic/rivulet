// Generated by LiveScript 1.4.0
(function(){
  var kefir, patch, objectPath;
  kefir = require('kefir');
  patch = require('fast-json-patch');
  objectPath = require('object-path');
  module.exports = function(socket, channel){
    var state, observers, rivulet, emitStream;
    state = {};
    observers = {
      atom: {},
      flat: {},
      deep: {}
    };
    rivulet = function(it){
      if (it) {
        return rivulet.patch(patch.compare(state, it));
      } else {
        return JSON.parse(JSON.stringify(state));
      }
    };
    import$(rivulet, {
      get: function(path){
        return objectPath.get(state, path);
      },
      set: function(path, val){
        var revised;
        revised = rivulet();
        objectPath.set(revised, path, val);
        return rivulet(revised);
      },
      del: function(path){
        return objectPath.del(state, path);
      },
      observe: function(path, func, depth){
        depth == null && (depth = 'flat');
        if (!observers[depth][path]) {
          observers[depth][path] = {};
          observers[depth][path].stream = kefir.stream(function(it){
            return observers[depth][path].emitter = it;
          });
        }
        if (func) {
          observers[depth][path].stream.onValue(function(){
            return setTimeout(function(){
              return func(rivulet());
            });
          });
        }
        return observers[depth][path].stream;
      },
      observeAtom: function(path, func){
        return rivulet.observe(path, func, 'atom');
      },
      observeFlat: function(path, func){
        return rivulet.observe(path, func, 'flat');
      },
      observeDeep: function(path, func){
        return rivulet.observe(path, func, 'deep');
      },
      patch: function(diff){
        var deepEmits, flatEmits, i$, len$, change, lresult$, changePath, path, ref$, observer, results$ = [];
        rivulet.last = diff;
        deepEmits = [];
        flatEmits = [];
        patch.apply(state, diff);
        for (i$ = 0, len$ = diff.length; i$ < len$; ++i$) {
          change = diff[i$];
          lresult$ = [];
          changePath = compact(change.path.split('/')).join('.');
          if (observers.atom[changePath]) {
            observers.atom[changePath].emitter.emit(changePath);
          }
          for (path in ref$ = observers.deep) {
            observer = ref$[path];
            if (in$(path, deepEmits)) {
              continue;
            }
            if (RegExp(path + '').test(changePath)) {
              observer.emitter.emit(path);
              deepEmits.push(path);
            }
          }
          for (path in ref$ = observers.flat) {
            observer = ref$[path];
            if (in$(path, flatEmits)) {
              continue;
            }
            if (RegExp('^' + path + '(\\.[^\\.]+)?$').test(changePath)) {
              observer.emitter.emit(path);
              lresult$.push(flatEmits.push(path));
            }
          }
          results$.push(lresult$);
        }
        return results$;
      }
    });
    if (socket && channel) {
      rivulet.socket = socket;
      rivulet.socket.on(channel, function(it){
        emitStream.pause = true;
        rivulet.patch(it);
        return emitStream.pause = false;
      });
      emitStream = rivulet.observeDeep('');
      emitStream.pause = false;
      emitStream.onValue(function(){
        if (emitStream.pause) {
          return;
        }
        return socket.emit(channel, rivulet.last);
      });
    }
    return rivulet;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
